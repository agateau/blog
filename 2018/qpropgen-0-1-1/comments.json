[{"id":"dsq-4232140060","author":"Tomaz Canabrava","deleted":false,"createdAt":"2018-12-09T12:15:00Z","message":"<p>I did the same thing, and even blogged about it a few months ago, with the difference that my approach is in json.<br>would you mind combinning projects so we don't diverge too much?<br>Mine also exports to a QProperty's skeleton to be used inside Qml.</p><p><a href=\"https://github.com/tcanabrava/configuration-parser\" rel=\"nofollow noopener\" title=\"https://github.com/tcanabrava/configuration-parser\">https://github.com/tcanabra...</a> - the name is misleading, as it started as a parser for configuration files to c++ / qt classes, but now it's a generator for QObjects or QSettings skeletons.</p>","replies":[{"id":"dsq-4232298236","author":"Aurélien Gâteau","deleted":false,"createdAt":"2018-12-09T15:11:37Z","message":"<p>Hi Tomaz!</p><p>I missed your article about your tool. Went looking for it and found <a href=\"https://www.angrycane.com.br/en/2018/06/07/lazy-programmers-and-q_property/\" rel=\"nofollow noopener\" title=\"https://www.angrycane.com.br/en/2018/06/07/lazy-programmers-and-q_property/\">https://www.angrycane.com.b...</a>. I guess this is the article you refer to?</p><p>In this article you say:</p><p>&gt; Now, I don’t plan that people would keep the template files for the code<br> generation on the repo, this is just the first step to generate a lot <br>of boilerplate quickly.</p><p>That is not the goal I have with qpropgen: I want to be able to add/remove/edit properties and regenerate them. This is why I added a CMake file and also why I picked the more verbose yaml format (btw, your file format does not look like json!): the format makes it possible to fine-tune the generated code, for example marking the property as read-only, or constant, or marking the getters and setters as virtual.</p><p>As such, I am not sure we can combine the two projects, they take a different approach to a similar goal, not to mention I have little interest in supporting QSettings (which I strongly dislike).</p>","replies":[{"id":"dsq-4232382618","author":"Tomaz Canabrava","deleted":false,"createdAt":"2018-12-09T16:23:00Z","message":"<p>sorry, json was a typo, I mean tto say something that resembles Qml.</p><p>the QSettings generator was for a project that used QSettings heavily in the Qml front so it needed a QObject wrapper around it with getters and setters (and my plan is to use that to generate KConfig / KConfigXT wrappers too in the future because I really don't like the idea to write XML by hand for the KConfigXT generated code.)</p>","replies":[]},{"id":"dsq-4269162440","author":"disqus_t2TetXtGqE","deleted":false,"createdAt":"2019-01-04T13:38:19Z","message":"<p>agateau (:</p>","replies":[]}]}]}]
