[{"id":"dsq-457709544","author":"Tirpen","deleted":false,"createdAt":"2007-11-11T23:52:29Z","message":"<p>I'd probably just be lazy and generate the shadows in the Gimp or similar once and then just cut and paste them under the images, (with apropriate resizing/cropping of course). :)<br> Unless you plan to let the user customize their look of course.</p>","replies":[]},{"id":"dsq-457709545","author":"LordBernhard","deleted":false,"createdAt":"2007-11-11T23:57:02Z","message":"<p>looks great... don't know what you want more ^^</p>","replies":[]},{"id":"dsq-457709546","author":"Stefan Monov","deleted":false,"createdAt":"2007-11-12T00:11:20Z","message":"<p>Just take the alpha component of the image and gaussian blur it. A bit slow but it's the right thing to do as you don't only operate on photo-like fully opaque images.<br>If you really wanna do a specialcase optimization for the common JPEG case (where there's no alpha), I think you need to increase the radius of the corner gradients so they line up.</p>","replies":[]},{"id":"dsq-457709548","author":"liquidat","deleted":false,"createdAt":"2007-11-12T00:48:42Z","message":"<p>Hm, to be honest I just see that it does not really work out via kmag.<br>In general, the effect looks very nice, and I'm really looking forward to the new Gwenview in KDE 4!</p>","replies":[]},{"id":"dsq-457709533","author":"Aurélien","deleted":false,"createdAt":"2007-11-12T01:35:48Z","message":"<p>@Tirpen: I am not sure it would look great if I scale them. Plus, it's nice to be able to tweak the shadow without modifying an image, even if the shadow parameters aren't accessible from the user interface.</p><p>@LordBernhard: Thanks!</p><p>@Stefan: Right now no shadows are drawn being images which aren't fully opaque.</p><p>@Liquidat: Thanks!</p>","replies":[]},{"id":"dsq-457709532","author":"Stefan Monov","deleted":false,"createdAt":"2007-11-12T02:10:43Z","message":"<p>Ok let's see, on second thought non-opaque images shouldn't have a shadow indeed. Just go ahead and increase the corner radius to fix the glitch.</p>","replies":[]},{"id":"dsq-457709534","author":"Jason","deleted":false,"createdAt":"2007-11-12T02:47:29Z","message":"<p>What about: start with the image's QRect, offset it in x and y, fill it with black, and apply a Gaussin blur?</p>","replies":[]},{"id":"dsq-457709535","author":"Aurélien","deleted":false,"createdAt":"2007-11-12T02:52:42Z","message":"<p>@Jason: I tried this, using ImageBlitz blur implementation, but I couldn't get a decent result. It's also a bit overkill to gaussian blur an almost uniform image, even if I cache the generated shadow.</p>","replies":[]},{"id":"dsq-457709539","author":"Sébastien Laoût","deleted":false,"createdAt":"2007-11-12T04:10:47Z","message":"<p>1. Grab the code making shadows in kshadowengine.cpp of Kicker KDE3 library code base.</p><p>2. Do all this once at the application start:<br>- Create an image of say 500x500 pixels (bigger than any shadowed box you have to draw later on)<br>- Must draw a square of 490x490 pixels on the middle of the image<br>- Call the shadow method: the Kicker code will generate a shadow for you<br>- Finally, break the image in 9 parts: the four corners, the four borders, and the center part.</p><p>3. When you need to draw a shadow:<br>- Paint the four corners arround your image<br>- Paint the four borders arround your image, by clipping the drawing so that they are cutted down</p><p>Except that the application startup is slowed down, every drawings are then very fast.<br>I use that render,split&amp;cache technics for Kirocker Music Display frame drawings (except that I have to stretch the borders and the middle part, which is slow).</p>","replies":[]},{"id":"dsq-457709540","author":"Sébastien Laoût","deleted":false,"createdAt":"2007-11-12T04:15:16Z","message":"<p>As an optimization, you can create 2 images:<br>- A 500x30 pixels one for the four corners and the top &amp; bottom borders<br>- A 30x500 pixels one for the left &amp; right borders</p><p>No need to crate a shadow of a 490x490 uniform pixels.</p><p>Or glossian blur, for that matter...</p><p>I think it's a very good optimization to both caching the corners&amp;borders and to generate them using two small rectangles!</p>","replies":[]},{"id":"dsq-457709529","author":"Aurélien","deleted":false,"createdAt":"2007-11-12T13:46:05Z","message":"<p>@Sébastien Laoût: Thanks for the tips, will have a look at kshadowengine.cpp.</p>","replies":[]},{"id":"dsq-457709525","author":"Sébastien Laoût","deleted":false,"createdAt":"2007-11-13T01:46:21Z","message":"<p>Well, the blurring code may do the trick as well, and may be more optimized (using GPU in the future, or now).</p><p>Oh, and another optimization to not make application startup slower, you can generate the shadow parts only the first time a shadow need to be drawn (the corners and borders are pointers, if they are null, it's the first time, generate them. The next times, the pointers are not null, simply use them).</p><p>So if the user starts Gwenview to view an image, no shadow has to be computed, so no time is lost.</p>","replies":[]},{"id":"dsq-457709523","author":"Tirpen","deleted":false,"createdAt":"2007-11-13T11:32:04Z","message":"<p>I didn't mean that you should just scale them. Obviously you should cut out the areas near the corners and the edges and then just scale the edges. Sorry to be unclear. :)</p>","replies":[]}]