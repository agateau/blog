[{"id":"dsq-457710642","author":"Christophe Fergeau","deleted":false,"createdAt":"2009-08-10T12:05:27Z","message":"<p>My comment to your previous blog post was mostly a tongue in cheek comment since cmake makes some things really complicated while you get them for free with the autotools... Hardcoding the SCM used in make dist is imo a bad thing, for example if someone wants to use a git2xxx gateway, this make dist target won't work for him for obvious reasons. Ditto for all the projects which are switching from svn to git nowadays.</p>","replies":[{"id":"dsq-457710644","author":"Aurélien","deleted":false,"createdAt":"2009-08-11T01:43:13Z","message":"<p>Don't get me started on autotools... I consider them to be one of the biggest if not the biggest error the free software community created. All build systems suck more or less, but only autotools can make you cry in despair. Only autotools requires you to use a two-level generation system (<a href=\"http://Makefile.in\" rel=\"nofollow noopener\" title=\"Makefile.in\">Makefile.in</a>, then Makefile) and a scripting language (M4) so useless you need to write almost everything in shell.</p><p>&gt; cmake makes some things really complicated while you get them for free with the autotools…<br>True, CMake does not come with a \"dist\" target out of the box, but the few lines I described in my previous blog make it possible to create .msi, .dmg, .rpm or .deb... does autotools give you this for free?</p><p>&gt; Hardcoding the SCM used in make dist is imo a bad thing<br>Using the SCM to track which files should be included in the distribution sounds much saner to me than having to declare those files manually.<br>It means a source distribution is a snapshot of what you have in the repository. It's just not a good idea with autotools because autotools require you to ship auto-generated files (the ./configure and its <a href=\"http://Makefile.in\" rel=\"nofollow noopener\" title=\"Makefile.in\">Makefile.in</a> friends). Since they are auto-generated, you do not want to commit them in your repository, thus creating the need for a parallel way to declare which files should be releases. Other build system like CMake or SCons do not have such requirements, making the maintainer life easier.</p>","replies":[]}]},{"id":"dsq-457710646","author":"Eddy Petrișor","deleted":false,"createdAt":"2009-08-22T14:07:02Z","message":"<p>The main purpose of the autotools is to make the life of the *users* easier and to add portability to the generated Makefile. In the long run autotools make the maintainer life easier, too.</p><p>The purpose of cmake is to make the life of the maintainer easier at the expense of portability, cross-build-ability and extra dependency during build.</p><p>As long as cmake is not ported to my target platform cmake is useless while autotools *results* are definetly more portable than cmake itslef.</p>","replies":[{"id":"dsq-457710651","author":"Aurélien","deleted":false,"createdAt":"2009-08-22T21:32:04Z","message":"<p>The goal of autotools is nice, unfortunately I think the way it was implemented is a pain.</p><p>I am curious, what is your target platform?</p>","replies":[{"id":"dsq-457712132","author":"Eddy Petrișor","deleted":false,"createdAt":"2009-08-24T00:24:29Z","message":"<p>I wasn't actually talking about some platform in which I have a special interest and cmake wasn't there, but it always fascinated me how autotools had support for flavours of Unices I heard and/or had brief contact with and thought the platform was lacking (e.g. AIX).</p><p>Using the autotools makes porting to that platform easy and thus enriching it easily.</p><p>OTOH, when I looked the last time at it, cross building in cmake was not possible. This is problematic for slower arches such as ARM, AVR32 since native building is almost in all cases out of the question. Not sure what's the  current situation, but taking into account the design of the tool, that seems difficult (but I might be wrong).</p>","replies":[{"id":"dsq-457712615","author":"Aurélien Gâteau","deleted":false,"createdAt":"2009-08-24T12:39:05Z","message":"<p>Cross building is much better starting with cmake 2.6, but nowadays it's probably easier to use scratchbox or openembedded for your cross build needs. This applies to both autotools or cmake based projects (been there, done that)</p>","replies":[]}]}]}]}]
