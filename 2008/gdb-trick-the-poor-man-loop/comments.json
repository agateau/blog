[{"id":"dsq-457709807","author":"Nicolas Pennequin","deleted":false,"createdAt":"2008-04-18T03:10:05Z","message":"<p>print array[startindex]@num<br>will print the 'num' first elements of 'array[startindex]'. Nice too, but it can lead to a lot of data being displayed.</p>","replies":[]},{"id":"dsq-457709809","author":"Christoph Bartoschek","deleted":false,"createdAt":"2008-04-18T03:37:02Z","message":"<p>If array is a real array:</p><p>p array</p><p>If array is only a pointer to the first element of a real array:</p><p>p  (Type[length]) array</p><p>For example:</p><p>p (int[1024]) array</p><p>This does not work for operator[]. But then operator[] often accesses an array internaly and one can do this too in the debugger.</p>","replies":[]},{"id":"dsq-457709812","author":"Christoph Bartoschek","deleted":false,"createdAt":"2008-04-18T03:39:06Z","message":"<p>I meant:</p><p>p (Type[length]) *array</p>","replies":[]},{"id":"dsq-457709813","author":"Christoph Bartoschek","deleted":false,"createdAt":"2008-04-18T03:44:03Z","message":"<p>Just forget the above comments:</p><p>For plain arrays:</p><p>p *(array + start)@length</p><p>For pointers:</p><p>p *array@length</p>","replies":[]},{"id":"dsq-457709814","author":"Reckoning","deleted":false,"createdAt":"2008-06-19T16:59:22Z","message":"<p>Somehow i missed the point. Probably lost in translation :) Anyway ... nice blog to visit.</p><p>cheers, Reckoning!!</p>","replies":[]},{"id":"dsq-457709815","author":"Tobi Vollebregt","deleted":false,"createdAt":"2008-11-27T01:13:56Z","message":"<p>Nice post, it inspired me on how to traverse a linked list :-)<br>See here: <a href=\"http://springdeveloper.blogspot.com/2008/11/gdb-tricks.html\" rel=\"nofollow noopener\" title=\"http://springdeveloper.blogspot.com/2008/11/gdb-tricks.html\">http://springdeveloper.blog...</a></p>","replies":[]},{"id":"dsq-457709818","author":"Alex Esplin","deleted":false,"createdAt":"2010-01-05T22:24:20Z","message":"<p>If you know you're printing a null terminated array, or if you want to print a certain number of items from the array, you can use a while loop:</p><p>set $i=0<br>set $end=10<br>while ($i &lt; $end)<br>p array[$i++]<br>end</p><p>or for a null terminated array:</p><p>set $i=0<br>while (array[$i] != 0)<br>p array[$i++]<br>end</p>","replies":[{"id":"dsq-457712069","author":"Aur√©lien","deleted":false,"createdAt":"2010-01-06T03:18:38Z","message":"<p>Nice tricks, thanks!</p>","replies":[]}]},{"id":"dsq-457709819","author":"chirs","deleted":false,"createdAt":"2011-09-08T13:53:51Z","message":"<p>You can also call (void)puts(your_string) to print it to stdout.<br>which if its null terminated leads to a nicer output :)<br>anyone know a nice way of setting a string thats null terminated without gdb picking up the \\n as \"next command\"</p>","replies":[]},{"id":"dsq-457709820","author":"Vinod","deleted":false,"createdAt":"2011-11-16T05:03:18Z","message":"<p>I thought the original requirement was to print out an array.. personally, I find the following useful:</p><p>set $var=0<br>while ($var &lt; 1000)<br> if array[$var] != 0<br>   printf \"%d %d\\n\", $var, array[$var]<br> end<br>set $var=$var+1<br>end</p><p>somehow $var++ didn&amp;#039t work for me.. anyways.. the above works well for my needs...</p>","replies":[]}]